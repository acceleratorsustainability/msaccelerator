{"creationTimeStamp":"2022-10-22T18:13:37.044Z","modifiedTimeStamp":"2022-10-23T14:41:00.817Z","createdBy":"Alfredo.Iglesias.Rey@sas.com","modifiedBy":"Alfredo.Iglesias.Rey@sas.com","name":"MSFT Power Integration - Initialize.step","displayName":"MSFT Power Integration - Initialize.step","localDisplayName":"MSFT Power Integration - Initialize.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","uri":"/dataFlows/steps/7cdc40d6-db7f-4d0f-9f71-dfebc712a7ca","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Properties\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dataLib\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Enter the libname for data\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dataFolder\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Enter the folder for the data library\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"metadataLib\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Enter the libname for metadata\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"metadataFolder\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Enter the folder for the metadata library\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"mapsFolder\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Enter the folder for maps\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"dataLib\": \"data\",\n\t\t\"dataFolder\": \"&_USERHOME./data\",\n\t\t\"metadataLib\": \"metadata\",\n\t\t\"metadataFolder\": \"&_USERHOME./metadata\",\n\t\t\"mapsFolder\": \"&_USERHOME./maps\"\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n\n%macro getFromDataverse(aUrl, file, token);\n\tfilename resp \"&file\";\n\n\tproc http method=\"GET\" url=\"&aUrl\" out=resp;\n\t\theaders \"Accept\"=\"application/json\" \"Authorization\"=\"Bearer &token\" \n\t\t\t\"OData-MaxVersion\"=\"4.0\" \"OData-Version\"=\"4.0\";\n\trun;\n\n\tfilename resp clear;\n%mend;\n\n%macro convertAllODataToSASDataset(jsonDir,srctbl,dataLib,mapsDir);\n\tdata _null_;\n\t\tset &srctbl end=eof;\n\t\tcall symput(\"entityName\"|| left(trim(put(_N_, 4.))), EntityName);\n\t\tcall symput(\"sourceName\"|| left(trim(put(_N_, 4.))), SourceName);\n\t\tcall symput(\"TableName\"|| left(trim(put(_N_, 4.))), TableName);\n\t\tif eof then\n\t\t\tcall symput(\"NumDefinitions\", left(put(_N_, 4.)));\n\trun;\n\n\t%do i=1 %to &NumDefinitions;\n\t\t%let EntityName=&&EntityName&i;\n\t\t%let SourceName=&&SourceName&i;\n\t\t%let TableName=&&TableName&i;\n\t\t%let mapfile=&mapsDir./&EntityName..map;\n\n\t\t%convertSetJsonFilesToSASDataset(&jsonDir,&SourceName,&datalib,&TableName,&mapfile,append=N);\n\n\n\t%end;\n%mend;\n\n%macro convertSetJsonFilesToSASDataset(aDir,prefix,dstlib,tableName,mapfile,append=N);\n\tfilename tmpmap \"&mapFile\";\n\t%let index =1;\n\t%let filename=&aDir./&prefix..&index..json;\n\tfilename tmpjson \"&filename\";\n\t%if (%sysfunc(fexist(tmpjson)) AND %sysfunc(exist(&dstlib..&tableName)) AND (\"&append\" eq \"N\")) %then %do;\n\t\tproc datasets lib=&dstlib. nolist;\n\t\t\tdelete &tableName;\n\t\trun;\n\t%end;  \n\t%do %while (%sysfunc(fexist(tmpjson)));\n\t\tlibname tmpdata JSON fileref=tmpjson map=tmpmap NO_REOPEN_MSG;\n\t\tproc append data=tmpdata.&TableName base=&dstlib..&TableName force;\n\t\trun;\n\t\t%let index =%eval(&index+1);\n\t\t%let filename=&aDir./&prefix..&index..json;\n\t\tfilename tmpjson \"&filename\";\n\t%end;\n%mend;\n\n%macro downloadAllEntities(srctbl,dir,odataMap);\n\tdata _null;\n\t\tset &srctbl end=eof;\n\t\tcall symput(\"SOURCE_NAME\"|| trim(left(put(_N_,5.))), sourceName);\n\t\tcall symput(\"URL_NAME\"|| trim(left(put(_N_,5.))), url);\n\t\tif eof then call symput(\"NUMSOURCES\",trim(left(put(_N_,5.))));\n\trun;\n\t%do i=1 %to &NUMSOURCES; \n\t\t%let URL_NAME=&&URL_NAME&i;\n\t\t%let SOURCE_NAME=&&SOURCE_NAME&i;\n\t\t%let api=&apiCall./&URL_NAME;\n\t\t%let prefixFileName=&dir./&SOURCE_NAME.;\n\t\t%let suffix=;\n\t\t%let index =1;\n\t\t%let nextPage=Y;\n\t\t%do %while (&nextPage eq Y);\n\t\t\t%let filename=&prefixFileName..&index..json;\n\t\t\t%getFromDataverse(&api.,&filename,&authToken);\n\t\t\tfilename resp \"&filename\";\n\t\t\tlibname odata JSON fileref=resp map=&odataMap NO_REOPEN_MSG;\n\t\t\tproc sql noprint;\n\t\t\t\tselect trim(left(nextLink)) into:nextLink from odata.odata;\n\t\t\tquit;\n\t\t\tfilename resp clear;\n\t\t\t%if (%length(&nextLink) lt 3 or  %symexist(nextLink) eq 0 ) %then %do;\n\t\t\t\t%let nextPage=N;\n\t\t\t%end;\n\t\t\t%else %do;\n\t\t\t\t%let api=&nextLink;\n\t\t\t\t%let index= %eval(&index +1);\n\t\t\t%end;\n\t\t%end;\n\n\t%end;\n%mend;\n\n%macro downloadOdata(aUrl, authToken, aDir, prefix);\n\tfilename tmpmap temp;\n\n\tdata _null_;\n\t\tfile tmpmap;\n\t\tput \n\t\t\t\"{\"\"DATASETS\"\":[{\"\"DSNAME\"\":\"\"odata\"\",\"\"TABLEPATH\"\":\"\"/root\"\",\"\"VARIABLES\"\": [\";\n\t\tput \"{\"\"NAME\"\": \"\"ordinal_root\"\",\"\"TYPE\"\": \"\"ORDINAL\"\",\"\"PATH\"\": \"\"/root\"\"},\";\n\t\tput \"{\"\"NAME\"\": \"\"context\"\",\"\"TYPE\"\": \"\"CHARACTER\"\",\"\"PATH\"\": \"\"/root/@odata.context\"\",\"\"CURRENT_LENGTH\"\": 2048},\";\n\t\tput \"{\"\"NAME\"\": \"\"nextLink\"\",\"\"TYPE\"\": \"\"CHARACTER\"\",\"\"PATH\"\": \"\"/root/@odata.nextLink\"\",\"\"CURRENT_LENGTH\"\": 4096}\";\n\t\tput \"]}]}\";\n\trun;\n\n\t%let index =1;\n\t%let nextPage=Y;\n\n\t%do %while (&nextPage eq Y);\n\t\t%put &aUrl;\n\t\t%let filename=&aDir./&prefix..&index..json;\n\t\t%put &fileName;\n\t\t%getFromDataverse(&aUrl., &filename, &authToken);\n\t\tfilename resp \"&filename\";\n\t\tlibname odatatmp JSON fileref=resp map=tmpmap NO_REOPEN_MSG;\n\t\t;\n\n\t\tproc sql noprint;\n\t\t\tselect trim(left(nextLink)) into:nextLink from odatatmp.odata;\n\t\tquit;\n\n\t\tlibname odatatmp clear;\n\t\tfilename resp clear;\n \n\t\t%put nextLink=\"&nextLink\";\n\n\t\t%if (%length(&nextLink) lt 3 or  %symexist(nextLink) eq 0 ) %then\n\t\t\t%do;\n\t\t\t\t%let nextPage=N;\n\t\t\t%end;\n\t\t%else\n\t\t\t%do;\n\t\t\t\t%let aUrl=&nextLink;\n\t\t\t\t%let index= %eval(&index +1);\n\t\t\t%end;\n\t%end;\n\tfilename tmpmap clear;\n%mend;\n\n%macro sys_ls_dir(ls_dir_path, format=L, out_ref=WORK._LS_DIR_OUTPUT_, options=Y, time=Y) /\ndes = 'Use various functions to mimic listing the OS attributes of a directory and its members.';\n\n  %*** Save the current options to a dataset, and then change the options. ;\n  %if %sysfunc(upcase(&options.)) = Y %then %do;\n    %if %sysfunc(exist(WORK._LS_DIR_OPTSAVE_)) = 0 %then %do;\n      proc optsave out=WORK._LS_DIR_OPTSAVE_; \n      run;\n    %end;\n\n    options nomlogic nomprint nonotes nosymbolgen;\n  %end;\n\n  %*** Define the time the macro started running ;\n  %if %sysfunc(upcase(&time.)) = Y %then %do;\n    %local time_start;\n    %let time_start = %sysfunc(datetime());\n    %put Time Start: %sysfunc(timepart(&time_start.),time8.);\n  %end;\n\n  %macro temp_accesspermission();\n    if length(AccessPermission) = 10 then do;\n      %*** Define the octal representation of the access permissions. ;\n      OctalPermission = 0;\n      if substr(AccessPermission,2,1) ^= '-' then OctalPermission = OctalPermission + 400;\n      if substr(AccessPermission,3,1) ^= '-' then OctalPermission = OctalPermission + 200;\n      if substr(AccessPermission,4,1) ^= '-' then OctalPermission = OctalPermission + 100;\n      if substr(AccessPermission,5,1) ^= '-' then OctalPermission = OctalPermission + 40;\n      if substr(AccessPermission,6,1) ^= '-' then OctalPermission = OctalPermission + 20;\n      if substr(AccessPermission,7,1) ^= '-' then OctalPermission = OctalPermission + 10;\n      if substr(AccessPermission,8,1) ^= '-' then OctalPermission = OctalPermission + 4;\n      if substr(AccessPermission,9,1) ^= '-' then OctalPermission = OctalPermission + 2;\n      if substr(AccessPermission,10,1) ^= '-' then OctalPermission = OctalPermission + 1;\n    end;\n    else do;\n      OctalPermission = .;\n    end;\n  %mend temp_accesspermission;\n\n  %macro temp_lastmodified();\n    %*** If there is a last modified value then define the last modified date and time. ;\n    if LastModified ^= '' then do;\n      %*** For format ddmonyyyy:hh:mm:ss ;\n      if length(LastModified) = 18 and substr(LastModified,10,1) = ':' and substr(LastModified,13,1) = ':' and substr(LastModified,16,1) = ':' then do;\n        LastModifiedDate = input(substr(LastModified,1,9),date9.);\n        LastModifiedTime = input(substr(LastModified,11,8),time8.);\n      end; \n      %*** For format dd month yyyy hh:mm:ss ;\n      else if countc(LastModified,,'st') = 3 then do;\n        LastModifiedDate = input(cats(scan(LastModified,1,' '),substr(scan(LastModified,2,' '),1,3),scan(LastModified,3,' ')),date9.);\n        LastModifiedTime = input(scan(LastModified,4,' '),time8.);\n      end;\n      else do;\n        LastModifiedDate = .;\n        LastModifiedTime = .;\n      end;\n    end;\n  %mend temp_lastmodified;\n\n  %macro temp_dinfo(id=);\n    OwnerName = dinfo(&id.,'Owner Name');\n    GroupName = dinfo(&id.,'Group Name');\n    AccessPermission = dinfo(&id.,'Access Permission');\n    %temp_accesspermission();\n    FileSize = .;\n    LastModified = dinfo(&id.,'Last Modified');\n    %temp_lastmodified();\n  %mend temp_dinfo;\n\n  %macro temp_finfo(id=);\n    OwnerName = finfo(&id.,'Owner Name');\n    GroupName = finfo(&id.,'Group Name');\n    AccessPermission = finfo(&id.,'Access Permission');\n    %temp_accesspermission();\n    FileSize = input(finfo(&id.,'File Size (bytes)'),32.);\n    LastModified = finfo(&id.,'Last Modified');\n    %temp_lastmodified();\n  %mend temp_finfo;\n\n  %macro temp_binfo();\n    OwnerName = '';\n    GroupName = '';\n    AccessPermission = '';\n    OctalPermission = .;\n    FileSize = .;\n    LastModified = '';\n    LastModifiedDate = .;\n    LastModifiedTime = .;\n  %mend temp_binfo;\n\n  %*** Create the base transient table using the ls_dir_path. ;\n  data WORK._LS_DIR_NEXT_;\n    length FileSpecification $512;\n    %*** If the length of the path is 1, OR if the path does not end in a slash, then the FileSpecification is just the input path. ;\n    if length(\"%superq(ls_dir_path)\") = 1 or substr(\"%superq(ls_dir_path)\",length(\"%superq(ls_dir_path)\"),1) ^= '/' then do;\n      FileSpecification = \"%superq(ls_dir_path)\";\n    end;\n    %*** If the length of the path is not 1, AND the path ends in a slash, then remove the trailing slash. ;\n    else do;\n      FileSpecification = substr(\"%superq(ls_dir_path)\",1,length(\"%superq(ls_dir_path)\")-1);\n    end;\n  run;\n\n  %*** In order to avoid file-lock errors in log, route log to black hole. ;\n  %*** (ER)ROR: File is in use, /.../.../... ;\n*  proc printto log=\"/dev/null\";\n*  run;\n\n  %*** List the attributes of a file or directory. ;\n  data\n    %superq(out_ref)\n      (keep=\n        FileSpecification\n        ParentDirectory\n        MemberName\n        Type \n        %if %sysfunc(upcase(%superq(format))) = L %then %do;\n          OwnerName\n          GroupName\n          AccessPermission\n          OctalPermission\n          FileSize\n          LastModifiedDate \n          LastModifiedTime \n        %end;\n        Readable\n        SysMsg\n      )\n    ;\n    set WORK._LS_DIR_NEXT_ (keep=FileSpecification);\n\n    length\n      qref $8\n      cref $8\n      ParentDirectory $512\n      MemberName $256\n      Type $1\n      OwnerName $32\n      GroupName $32\n      AccessPermission $12\n      OctalPermission 3\n      Filesize 8.\n      LastModified $48\n      LastModifiedDate 8\n      LastModifiedTime 8\n      Readable $1\n      SysMsg $512\n      ;\n\n    format\n      LastModifiedDate date9.\n      LastModifiedTime time8.\n      ;\n\n    %*** Assign a file reference to the parent directory. ;\n    rc1 = filename(qref, FileSpecification);\n\n    %*** If the file assignment was successful then try and open as a directory. ;\n    %*** (NO)TE: File assignments are often successful in undesirable situations. ;\n    if rc1 = 0 then do;\n      pid = dopen(qref);\n      %*** Store any system message i.e. ;\n      %*** (ER)ROR: Physical file does not exist, /.../.../... ;\n      %*** (ER)ROR: Insufficient authorization to access /.../.../... ;\n      SysMsg = sysmsg();\n    end;\n    else do;\n      pid = .;\n    end;\n\n    %*** If we were able to open the file assignment as a directory then output ;\n    if pid > 0 then do;\n\n      %*** Determine the number of child members in the parent directory. ;\n      dnum = dnum(pid);\n\n      if dnum > 0 then do;\n\n        %*** Loop for each child member of the parent directory. ;\n        do i = 1 to dnum;\n\n          %*** Determine the name of the current child member (file or directory). ;\n          ParentDirectory = dinfo(pid,'Directory');\n          MemberName = dread(pid, i);\n\n          %*** Define the file specification using the parent directory and child member name. ;\n          if ParentDirectory = '/' then do;\n            FileSpecification = cats(ParentDirectory,MemberName);\n          end;\n          else do;\n            FileSpecification = cats(ParentDirectory,'/',MemberName);\n          end;\n\n          %*** Assign a file reference to the child directory. ;\n          rc2 = filename(cref, FileSpecification);\n\n          %*** If the file assignment was successful then try and open the child directory. ;\n          %*** (NO)TE: File assignments are often successful in undesirable situations. ;\n          if rc2 = 0 then do;\n            cid = dopen(cref);\n            %*** Store any system message i.e. ;\n            %*** (ER)ROR: Physical file does not exist, /.../.../... ;\n            %*** (ER)ROR: Insufficient authorization to access /.../.../... ;\n            SysMsg = sysmsg();\n          end;\n          else do;\n            cid = .;\n          end;\n\n          %*** Clear the file assignment as we are now using the cid variable. ;\n          rc3 = filename(cref);\n\n          %*** If opening the child directory was successful then output. ;\n          if cid > 0 then do;\n\n            %*** --------------------------------------------------------------------;\n            %*** OUTPUT BLOCK 1 - Successfully read child directory.                 ;\n            %*** --------------------------------------------------------------------;\n            Type = 'd';\n            %if %sysfunc(upcase(%superq(format))) = L %then %do;\n              %temp_dinfo(id=cid);\n            %end;\n            Readable = 'Y';\n            output;\n\n          end;\n          else do;\n            %*** Do not try and open any objects as files in dev, many of the files are read as an infinite stream ;\n            if substr(FileSpecification,1,4) = '/dev' or substr(FileSpecification,1,5) = '/proc' then do;\n\n              %*** --------------------------------------------------------------------;\n              %*** OUTPUT BLOCK 2 - Object looks like a file in /dev                   ;\n              %*** --------------------------------------------------------------------;\n              Type = '?';\n              %if %sysfunc(upcase(%superq(format))) = L %then %do;\n                %temp_binfo();\n              %end;\n              Readable = '?';\n              SysMsg = 'ERROR: Unable to attempt to open objects as files within /dev or /proc';\n              output;\n\n            end;\n            else do;\n\n              %*** Attempt to open the child member as a file. ;\n              fid = mopen(pid, MemberName, 'I');\n              SysMsg = sysmsg();\n\n              %*** If we were able to open the file assignment as a file then output ;\n              if fid > 0 then do;\n\n                %*** --------------------------------------------------------------------;\n                %*** OUTPUT BLOCK 3 - Successfully read child file.                      ;\n                %*** --------------------------------------------------------------------;\n                Type = 'f';\n                %if %sysfunc(upcase(%superq(format))) = L %then %do;\n                  %temp_finfo(id=fid);\n                %end;\n                Readable = 'Y';\n                output;\n\n              end;\n              %*** If we are unable to open the file assignment as a directory or file then output. ;\n              else do;\n\n                %*** --------------------------------------------------------------------;\n                %*** OUTPUT BLOCK 4 - Failed to read child directory or file.            ;\n                %*** --------------------------------------------------------------------;\n                Type = '?';\n                %if %sysfunc(upcase(%superq(format))) = L %then %do;\n                  %temp_binfo();\n                %end;\n                Readable = 'N';\n                output;\n\n              end;\n            end;\n            %*** Close the file. ;\n            rc4 = fclose(fid);\n          end;\n          %*** Close the child directory. ;\n          rc5 = dclose(cid);\n        end;\n      end;\n    end;\n\n    %*** Close the directory. ;\n    rc6 = dclose(pid);\n\n    %*** Clear the file assignment. ;\n    rc7 = filename(qref);\n  run;\n\n  %*** Get the log back. ;\n  proc printto log=LOG;\n  run;\n\n  proc sort \n    data = %superq(out_ref);\n    by FileSpecification;\n  run;\n\n  %*** Delete the temp table(s). ;\n  proc datasets lib=WORK nolist;\n    delete\n      _LS_DIR_NEXT_\n      ;\n    run;\n  quit;\n\n  %*** Define the time the macro stopped running and the time taken ;\n  %if %sysfunc(upcase(&time.)) = Y %then %do;\n    %local time_stop;\n    %let time_stop = %sysfunc(datetime());\n    %put Time Stop: %sysfunc(timepart(&time_stop.),time8.);\n \n    %local time_taken;\n    %let time_taken = %sysevalf(&time_stop. - &time_start.);\n    %put Time Taken: %sysfunc(putn(&time_taken.,time8.));\n  %end;\n\n  %*** Reset the options using the saved dataset. ;\n  %if %sysfunc(upcase(&options.)) = Y %then %do;\n    %if %sysfunc(exist(WORK._LS_DIR_OPTSAVE_)) = 1 %then %do;\n      proc optload data=WORK._LS_DIR_OPTSAVE_;\n      run;\n\n      %*** Delete the temp table(s). ;\n      proc datasets lib=WORK nolist;\n        delete\n          _LS_DIR_OPTSAVE_\n          ;\n        run;\n      quit;\n    %end;\n  %end;\n%mend sys_ls_dir;\n\n%macro joinAllJsons(path, targetfile,context);\n/* This macro takes all the files with json extension on a certain path. The files are assumed to contained one JSON object *?\nThe macro writes into the target files an object whith only one attribute, using the context parameter as attribute name and \nthe value is an array with all the individual objects found in the set of files */\n\n\t%if %sysfunc(fileexist(&targetfile)) ge 1 %then\n\t\t%do;\n\t\t\t%put Removing file &targetfile;\n\t\t\t%let rc=%sysfunc(filename(temp, &targetfile));\n\t\t\t%let rc=%sysfunc(fdelete(&temp));\n\t\t%end;\n\t%else\n\t\t%put The file &targetfile does not exist;\n\t%sys_ls_dir(&path);\n\n\tdata WORK._LS_DIR_OUTPUT_1;\n\t\tset WORK._LS_DIR_OUTPUT_;\n\t\tlength extension $ 10;\n\n\t\tif Type eq 'f';\n\n\t\tif anydigit(MemberName) lt 1;\n\t\tl=length(MemberName);\n\t\tindex=index(reverse(trim(left(MemberName))), '.');\n\t\textension=\"\";\n\n\t\tif index gt 1 then\n\t\t\textension=substr(MemberName, l-index+2);\n\n\t\tif extension eq \"json\";\n\t\tkeep FileSpecification MemberName;\n\trun;\n\n\tdata _null_;\n\t\tset WORK._LS_DIR_OUTPUT_1 end=eof;\n\t\t;\n\t\tcall symput(\"FILE\"|| trim(left(put(_N_, 5.))), FileSpecification);\n\t\tcall symput(\"MEMBER\"|| trim(left(put(_N_, 5.))), MemberName);\n\n\t\tif eof then\n\t\t\tcall symput(\"NUMFILES\", trim(left(put(_N_, 5.))));\n\trun;\n\n\tfilename target \"&targetfile\" mod;\n\n\t%do i=1 %to &NUMFILES;\n\t\t%let FILE=&&FILE&i;\n\t\tfilename source \"&file\";\n\n\t\t%if &i eq 1 %then\n\t\t\t%do;\n\n\t\t\t\tdata _null_;\n\t\t\t\t\tfile target;\n\t\t\t\t\tput \"{ \"\"&context\"\" : [\";\n\t\t\t\trun;\n\n\t\t\t%end;\n\n\t\tdata _null_;\n\t\t\tlength line $ 1024;\n\t\t\tfile target;\n\t\t\tinfile source truncover;\n\t\t\tinput line $1024.;\n\t\t\tput line;\n\t\trun;\n\n\t\tdata _null_;\n\t\t\tfile target;\n\n\t\t\t%if &i eq &NUMFILES %then\n\t\t\t\t%do;\n\t\t\t\t\tput \"]}\";\n\t\t\t\t%end;\n\t\t\t%else\n\t\t\t\t%do;\n\t\t\t\t\tput \",\";\n\t\t\t\t%end;\n\t\trun;\n\n\t\tfilename source clear;\n\t%end;\n\tfilename target clear;\n%mend;\n\n%macro generateMapFiles(srctables, srcmembers, mapsDir);\n\tdata _null_;\n\t\tset &srctables end=eof;\n\t\twhere entityName ne \"\";\n\t\tcall symput(\"id\"|| left(put(_N_, 4.)), id);\n\t\tcall symput(\"EntityName\"|| left(put(_N_, 4.)), entityname);\n\t\tcall symput(\"SourceName\"|| left(put(_N_, 4.)), sourceName);\n\t\tcall symput(\"TableName\"|| left(put(_N_, 4.)), tableName);\n\n\t\tif eof then\n\t\t\tcall symput(\"NumEntities\", left(put(_N_, 4.)));\n\trun;\n\n\t%do i=1 %to &numEntities;\n\t\t%let id =&&id&i;\n\t\t%let entityName =&&entityName&i;\n\t\t%let sourceName =&&sourceName&i;\n\t\t%let tableName =&&tableName&i;\n\n\t\tdata mymembers;\n\t\t\tset &srcmembers;\n\t\t\twhere definitionid=&id;\n\t\trun;\n\n\t\tproc sort data=mymembers;\n\t\t\tby sourceordering;\n\t\trun;\n\n\t\tfilename map \"&mapsDir./&entityName..map\";\n\n\t\tdata _null_;\n\t\t\tset mymembers end=eof;\n\t\t\tfile map;\n\t\t\tlength fieldinformat fieldformat $50 path $200 line $300;\n\n\t\t\tif _N_ eq 1 then\n\t\t\t\tdo;\n\t\t\t\t\tput \"{\"\"DATASETS\"\": [ { \"\"DSNAME\"\": \"\"&tableName.\"\", \"\"TABLEPATH\"\": \"\"/root/value\"\", \"\"VARIABLES\"\": [\";\n\t\t\t\t\tput \n\t\t\t\t\t\t\"{\"\"NAME\"\": \"\"ordinal_id\"\", \"\"TYPE\"\": \"\"ORDINAL\"\", \"\"PATH\"\": \"\"/root/value\"\"} \";\n\t\t\t\tend;\n\t\t\tcharacter=1;\n\t\t\tfieldFormat=\"\";\n\t\t\tfieldInformat=\"\";\n\n\t\t\tif (dataType eq \"entityId\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=50;\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"\" and dataTypeReference eq \"listLookup\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=10;\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"boolean\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=5;\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"string\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=min(maximumLength, 32767);\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"url\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=1024;\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"integer\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=0;\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"decimal\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=0;\n\t\t\t\t\tfieldinformat=\", \"\"INFORMAT\"\" : [ \"\"?BEST\"\", 20, 10 ]\";\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"integer\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=0;\n\t\t\t\t\tfieldinformat=\", \"\"INFORMAT\"\" : [ \"\"?BEST\"\", 20, 0 ]\";\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"currency\") then\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=0;\n\t\t\t\t\tfieldinformat=\", \"\"INFORMAT\"\" : [ \"\"?BEST\"\", 20, 3 ]\";\n\t\t\t\tend;\n\t\t\telse if (dataType eq \"dateTime\") then\n\t\t\t\tdo;\n/* \t\t\t\t\tcharacter=1; */\n/* \t\t\t\t\tstringLength=25; */\n\t\t\t\t\tcharacter=0;\n\t\t\t\t\tfieldinformat=\", \"\"INFORMAT\"\" : [ \"\"?IS8601DT\"\" , 19, 0]\";\n\t\t\t\t\tfieldFormat=\", \"\"FORMAT\"\" : [ \"\"IS8601DT\"\", 19, 0 ]\";\n\t\t\t\t\tstringLength=20;\n\t\t\t\tend;\n\t\t\telse\n\t\t\t\tdo;\n\t\t\t\t\tcharacter=1;\n\t\t\t\t\tstringLength=100;\n\t\t\t\tend;\n\t\t\tpath=\"/root/value/\" || sourceName;\n\n\t\t\tif (character eq 1) then\n\t\t\t\tdo;\n\t\t\t\t\tline=\",{ \"\"NAME\"\": \"\"<<NAME>>\"\", \"\"TYPE\"\": \"\"CHARACTER\"\", \"\"PATH\"\": \"\"<<PATH>>\"\", \"\"CURRENT_LENGTH\"\": <<LENGTH>> }\";\n\t\t\t\t\tline=tranwrd(line, \"<<NAME>>\", trim(columnName));\n\t\t\t\t\tline=tranwrd(line, \"<<PATH>>\", trim(path));\n\t\t\t\t\tline=tranwrd(line, \"<<LENGTH>>\", left(trim(put(stringLength, 5.))));\n\t\t\t\t\tput line;\n\t\t\t\tend;\n\t\t\telse\n\t\t\t\tdo;\n\t\t\t\t\tline=\",{ \"\"NAME\"\": \"\"<<NAME>>\"\", \"\"TYPE\"\": \"\"NUMERIC\"\", \"\"PATH\"\": \"\"<<PATH>>\"\" <<INFORMAT>> <<FORMAT>> <<LENGTH>>}\";\n\t\t\t\t\tline=tranwrd(line, \"<<NAME>>\", trim(columnName));\n\t\t\t\t\tline=tranwrd(line, \"<<PATH>>\", trim(path));\n\t\t\t\t\tline=tranwrd(line, \"<<INFORMAT>>\", trim(fieldInformat));\n\t\t\t\t\tline=tranwrd(line, \"<<FORMAT>>\", trim(fieldFormat));\n\n\t\t\t\t\tif stringLength gt 0 then\n\t\t\t\t\t\tline=tranwrd(line, \"<<LENGTH>>\", \", \"\"CURRENT_LENGTH\"\": 20\");\n\t\t\t\t\telse\n\t\t\t\t\t\tline=tranwrd(line, \"<<LENGTH>>\", \"\");\n\t\t\t\t\tput line;\n\t\t\t\tend;\n\n\t\t\tif eof then\n\t\t\t\tdo;\n\t\t\t\t\tput \"] } ] }\";\n\t\t\t\tend;\n\t\trun;\n\n\t%end;\n%mend;\n\n%macro getAuthToken(tenantId, appId, clientSecret, powerPlatformOrg, \n\t\tpowerPlatformEnvironmentUrl, macroVar);\n\t%let oAuthTokenEndpoint=https://login.microsoftonline.com/&tenantID./oauth2/v2.0/token;\n\t%global &macroVar;\n\tfilename authReq temp;\n\tfilename authMap temp;\n\tfilename authResp temp;\n\n\tdata _null_;\n\t\tfile authReq;\n\t\tlength line $ 4096;\n\t\tline='&' !! \"client_id\" !! '=' !! \"&appId\" !! \n\t\t'&' !! \"client_secret\" !! '=' !! \"&clientSecret\" !! \n\n\t\t\t\t\t'&' !! \"scope\" !! '=' !! urlencode(\"&powerPlatformEnvironmentUrl./.default\") \n\t\t\t!!\n\t\t'&grant_type=client_credentials&';\n\t\tput line;\n\trun;\n\n\tproc http method=\"POST\" url=\"&oAuthTokenEndpoint.\" \n\t\t\tct=\"application/x-www-form-urlencoded\" in=authReq out=authResp;\n\trun;\n\n\tlibname auth JSON fileref=authResp map=authMap automap=create NO_REOPEN_MSG;\n\t%local ACCESS_TOKEN;\n\n\tproc sql noprint;\n\t\tselect access_token into:ACCESS_TOKEN from auth.root;\n\tquit;\n\n\tdata _null_;\n\t\tcall symput(\"&macroVar\", \"&ACCESS_TOKEN\");\n\trun;\n\n\tfilename authReq clear;\n\tfilename authMap clear;\n\tfilename authResp clear;\n\tlibname auth clear;\n%mend getAuthToken;\n\n\noptions dlcreatedir;\n\n%if (%symexist(metadataLib) and %symexist(metadataFolder)) %then %do;\n\tlibname &metadataLib \"&metadataFolder\";\n%end;\n%else %do;\n\t%put NOTE: No library for metadata has been defined;\n%end;\n%if (%symexist(dataLib) and %symexist(dataFolder)) %then %do;\n\tlibname &dataLib \"&dataFolder\";\n%end;\n%else %do;\n\t%put NOTE: No library for data has been defined;\n%end;\n\nlibname maps \"&mapsFolder\";\nlibname maps clear;\n\n%let MSFPowerIntegrationInitialized=1;\n\n\n\n\n\n"}}